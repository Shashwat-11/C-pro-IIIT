# Lab 1

## Problem 1: Number Splitting

Ninja Fruit is Yash's favourite game. Yash is also a math enthusiast. He wants to make another game called Math Ninja where instead of fruits, numbers get split. He wants you to help him with this task.

You are given two integers, `a` and `b`. Your task is to split the integer `a` into two parts based on the position determined by the value of `b`. Specifically, the split should occur at the digit place corresponding to the value of `b`.

For instance, if `b` is 10, the split should occur at the tens place of the integer `a`, meaning that the number will be divided into two parts: the first part will contain all digits up to the tens place, and the second part will contain the digits that follow. If `b` is 100, the split will happen at the hundreds place, and so on.

Ignore any leading zeroes if any. For example, if `a = 1204` and `b = 10`, the output will be `12 4`.

### Input Format:

- A single line containing two integers `a` and `b`.

### Constraints:

- `0 ≤ a ≤ 1e8`
- `1 ≤ b ≤ 1e6`
- `b` is a power of 10.

### Output Format:

Print the two split integers with a space in between them. Print the left split first and then the right split separated by a space. Ignore any leading zeroes.

### Example:

**Input:**
1234 10

**Output:**
12 34


**Note:**

In this example, `a = 1234` and `b = 10`. Splitting occurs at the tens place, dividing the number into `12` and `34`.

**Input:**
1204 10


**Output:**
12 4


**Note:**

In this example, `a = 1204` and `b = 10`. Splitting occurs at the tens place, dividing the number into `12` and `04`. We ignore the leading zero and just print `12` and `4`.

---
# Problem 2: Jolly Numbers

You're a mathematician tasked with determining a special set of numbers called **Jolly Numbers**. These numbers are defined by a unique iterative process. Given an integer `N`, your goal is to identify all Jolly Numbers up to `N` (inclusive).

## The Process

A Jolly Number is defined as follows:

1. **Start with any positive integer.**
2. **Replace** the number by the **sum of the squares of its digits**.
3. **Repeat the process** until the number becomes 1 (in which case it is a Jolly Number and the process ends) or it **loops indefinitely** (in which case it is not a Jolly Number). The process stops if it loops within 100 iterations.

Your task is to identify and print all Jolly Numbers up to `N`.

## Input Format

- A single integer `N` such that `1 ≤ N ≤ 10,000`.

## Output Format

- Print a list of all Jolly Numbers from 1 to `N` separated by spaces.

## Constraints

- `1 ≤ N ≤ 10,000`

## Examples

### Example 1

**Input:**
19

**Output:**
1 7 10 13 19


**Explanation:**
For example, the number 19:
- `1^2 + 9^2 = 82`
- `8^2 + 2^2 = 68`
- `6^2 + 8^2 = 100`
- `1^2 + 0^2 + 0^2 = 1`
  
This process ends at 1, so 19 is a Jolly Number.

### Example 2

**Input:**
2


**Output:**
1


---

## Problem 3: Number Reversal

You are given an integer `n`. Your task is to reverse the digits of the number `n` and print the reversed number.

### Input Format:

- A single line containing an integer `n`.

### Output Format:

Print the reversed number. Please do not print the leading zeroes in the number.

### Constraints:

- `100000 ≤ n ≤ 999999`

### Example:

**Input:**
123456


**Output:**
654321


**Input:**
100200


**Output:**
2001


---

## Submission Guidelines

- Do not rename any files given in the handout. Only write the code in the specified C files in the respective directories.




